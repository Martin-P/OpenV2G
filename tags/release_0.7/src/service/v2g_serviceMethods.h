



/*
 * Copyright (C) 2007-2012 Siemens AG
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/*******************************************************************
 *
 * @author Sebastian.Kaebisch.EXT@siemens.com
 * @version 0.7
 * @contact Joerg.Heuer@siemens.com
 *
 * <p>Code generated by EXISeGen</p>
 *
 ********************************************************************/

 
 #ifdef __cplusplus
extern "C" {
#endif

#ifndef SERVICEMETHODS_H
#define SERVICEMETHODS_H

#include "v2g_dataTypes.h"
#include "EXITypes.h"

/** This service methods has to be implemented by the EVSE server */
/** 
 * \brief   This sessionSetup method is called by the service dispatcher if there was passed a sessionSetup-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct SessionSetupReqType Parameter dataset of the sessionSetup request message
 * \param	result  struct SessionSetupResType Result dataset for the sessionSetup response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	sessionSetup(struct MessageHeaderType* header, struct SessionSetupReqType* param, struct SessionSetupResType* result);
					
/** 
 * \brief   This serviceDiscovery method is called by the service dispatcher if there was passed a serviceDiscovery-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct ServiceDiscoveryReqType Parameter dataset of the serviceDiscovery request message
 * \param	result  struct ServiceDiscoveryResType Result dataset for the serviceDiscovery response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	serviceDiscovery(struct MessageHeaderType* header, struct ServiceDiscoveryReqType* param, struct ServiceDiscoveryResType* result);
					
/** 
 * \brief   This serviceDetail method is called by the service dispatcher if there was passed a serviceDetail-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct ServiceDetailReqType Parameter dataset of the serviceDetail request message
 * \param	result  struct ServiceDetailResType Result dataset for the serviceDetail response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	serviceDetail(struct MessageHeaderType* header, struct ServiceDetailReqType* param, struct ServiceDetailResType* result);
					
/** 
 * \brief   This servicePaymentSelection method is called by the service dispatcher if there was passed a servicePaymentSelection-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct ServicePaymentSelectionReqType Parameter dataset of the servicePaymentSelection request message
 * \param	result  struct ServicePaymentSelectionResType Result dataset for the servicePaymentSelection response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	servicePaymentSelection(struct MessageHeaderType* header, struct ServicePaymentSelectionReqType* param, struct ServicePaymentSelectionResType* result);
					
/** 
 * \brief   This paymentDetails method is called by the service dispatcher if there was passed a paymentDetails-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct PaymentDetailsReqType Parameter dataset of the paymentDetails request message
 * \param	result  struct PaymentDetailsResType Result dataset for the paymentDetails response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	paymentDetails(struct MessageHeaderType* header, struct PaymentDetailsReqType* param, struct PaymentDetailsResType* result);
					
/** 
 * \brief   This contractAuthentication method is called by the service dispatcher if there was passed a contractAuthentication-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct ContractAuthenticationReqType Parameter dataset of the contractAuthentication request message
 * \param	result  struct ContractAuthenticationResType Result dataset for the contractAuthentication response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	contractAuthentication(struct MessageHeaderType* header, struct ContractAuthenticationReqType* param, struct ContractAuthenticationResType* result);
					
/** 
 * \brief   This chargeParameterDiscovery method is called by the service dispatcher if there was passed a chargeParameterDiscovery-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct ChargeParameterDiscoveryReqType Parameter dataset of the chargeParameterDiscovery request message
 * \param	result  struct ChargeParameterDiscoveryResType Result dataset for the chargeParameterDiscovery response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	chargeParameterDiscovery(struct MessageHeaderType* header, struct ChargeParameterDiscoveryReqType* param, struct ChargeParameterDiscoveryResType* result);
					
/** 
 * \brief   This powerDelivery method is called by the service dispatcher if there was passed a powerDelivery-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct PowerDeliveryReqType Parameter dataset of the powerDelivery request message
 * \param	result  struct PowerDeliveryResType Result dataset for the powerDelivery response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	powerDelivery(struct MessageHeaderType* header, struct PowerDeliveryReqType* param, struct PowerDeliveryResType* result);
					
/** 
 * \brief   This chargingStatus method is called by the service dispatcher if there was passed a chargingStatus-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct ChargingStatusReqType Parameter dataset of the chargingStatus request message
 * \param	result  struct ChargingStatusResType Result dataset for the chargingStatus response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	chargingStatus(struct MessageHeaderType* header, struct ChargingStatusReqType* param, struct ChargingStatusResType* result);
					
/** 
 * \brief   This meteringReceipt method is called by the service dispatcher if there was passed a meteringReceipt-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct MeteringReceiptReqType Parameter dataset of the meteringReceipt request message
 * \param	result  struct MeteringReceiptResType Result dataset for the meteringReceipt response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	meteringReceipt(struct MessageHeaderType* header, struct MeteringReceiptReqType* param, struct MeteringReceiptResType* result);
					
/** 
 * \brief   This sessionStop method is called by the service dispatcher if there was passed a sessionStop-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct SessionStopType Parameter dataset of the sessionStop request message
 * \param	result  struct SessionStopResType Result dataset for the sessionStop response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	sessionStop(struct MessageHeaderType* header, struct SessionStopType* param, struct SessionStopResType* result);
					
/** 
 * \brief   This certificateUpdate method is called by the service dispatcher if there was passed a certificateUpdate-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct CertificateUpdateReqType Parameter dataset of the certificateUpdate request message
 * \param	result  struct CertificateUpdateResType Result dataset for the certificateUpdate response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	certificateUpdate(struct MessageHeaderType* header, struct CertificateUpdateReqType* param, struct CertificateUpdateResType* result);
					
/** 
 * \brief   This certificateInstallation method is called by the service dispatcher if there was passed a certificateInstallation-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct CertificateInstallationReqType Parameter dataset of the certificateInstallation request message
 * \param	result  struct CertificateInstallationResType Result dataset for the certificateInstallation response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	certificateInstallation(struct MessageHeaderType* header, struct CertificateInstallationReqType* param, struct CertificateInstallationResType* result);
					
/** 
 * \brief   This cableCheck method is called by the service dispatcher if there was passed a cableCheck-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct CableCheckReqType Parameter dataset of the cableCheck request message
 * \param	result  struct CableCheckResType Result dataset for the cableCheck response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	cableCheck(struct MessageHeaderType* header, struct CableCheckReqType* param, struct CableCheckResType* result);
					
/** 
 * \brief   This preCharge method is called by the service dispatcher if there was passed a preCharge-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct PreChargeReqType Parameter dataset of the preCharge request message
 * \param	result  struct PreChargeResType Result dataset for the preCharge response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	preCharge(struct MessageHeaderType* header, struct PreChargeReqType* param, struct PreChargeResType* result);
					
/** 
 * \brief   This currentDemand method is called by the service dispatcher if there was passed a currentDemand-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct CurrentDemandReqType Parameter dataset of the currentDemand request message
 * \param	result  struct CurrentDemandResType Result dataset for the currentDemand response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	currentDemand(struct MessageHeaderType* header, struct CurrentDemandReqType* param, struct CurrentDemandResType* result);
					
/** 
 * \brief   This weldingDetection method is called by the service dispatcher if there was passed a weldingDetection-based request message.
 * \param	header  struct MessageHeaderType* Header dataset
 * \param	param   struct WeldingDetectionReqType Parameter dataset of the weldingDetection request message
 * \param	result  struct WeldingDetectionResType Result dataset for the weldingDetection response message 
 * \return  0 = 0K; -1 = ERROR (message dispatcher will return an error) */
int	weldingDetection(struct MessageHeaderType* header, struct WeldingDetectionReqType* param, struct WeldingDetectionResType* result);
						
	

	
	
	
#endif

#ifdef __cplusplus
}
#endif
