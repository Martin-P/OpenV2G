

/*
 * Copyright (C) 2007-2012 Siemens AG
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/*******************************************************************
 *
 * @author Sebastian.Kaebisch.EXT@siemens.com
 * @version 0.7
 * @contact Joerg.Heuer@siemens.com
 *
 * <p>Code generated by EXISeGen</p>
 *
 ********************************************************************/

 
 
 #ifdef __cplusplus
extern "C" {
#endif

#ifndef SERVICECLIENTSTUBS_H
#define SERVICECLIENTSTUBS_H

 #include "v2g_service.h"
 #include "v2g_dataTypes.h"
 #include "v2g_serviceClientStubs.h"




enum responseMessages
{
	 SESSIONSETUPRES,

	 SERVICEDISCOVERYRES,

	 SERVICEDETAILRES,

	 SERVICEPAYMENTSELECTIONRES,

	 PAYMENTDETAILSRES,

	 CONTRACTAUTHENTICATIONRES,

	 CHARGEPARAMETERDISCOVERYRES,

	 POWERDELIVERYRES,

	 CHARGINGSTATUSRES,

	 METERINGRECEIPTRES,

	 CERTIFICATEUPDATERES,

	 CERTIFICATEINSTALLATIONRES,

	 CABLECHECKRES,

	 PRECHARGERES,

	 CURRENTDEMANDRES,

	 WELDINGDETECTIONRES,

	 SESSIONSTOPRES
};
 
/**  
 * \brief   Prepares the remote sessionSetup call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
 * \param	params   struct SessionSetupReqType* Request data for the server (has to be set up before)
 * \param	result   struct SessionSetupResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_sessionSetup(struct EXIService* service, struct MessageHeaderType* header, struct SessionSetupReqType* params, struct SessionSetupResType* result);

 

	
/**  
 * \brief   Prepares the remote serviceDiscovery call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
 * \param	params   struct ServiceDiscoveryReqType* Request data for the server (has to be set up before)
 * \param	result   struct ServiceDiscoveryResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_serviceDiscovery(struct EXIService* service, struct MessageHeaderType* header, struct ServiceDiscoveryReqType* params, struct ServiceDiscoveryResType* result);

 

	
/**  
 * \brief   Prepares the remote serviceDetail call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
 * \param	params   struct ServiceDetailReqType* Request data for the server (has to be set up before)
 * \param	result   struct ServiceDetailResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_serviceDetail(struct EXIService* service, struct MessageHeaderType* header, struct ServiceDetailReqType* params, struct ServiceDetailResType* result);

 

	
/**  
 * \brief   Prepares the remote servicePaymentSelection call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
 * \param	params   struct ServicePaymentSelectionReqType* Request data for the server (has to be set up before)
 * \param	result   struct ServicePaymentSelectionResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_servicePaymentSelection(struct EXIService* service, struct MessageHeaderType* header, struct ServicePaymentSelectionReqType* params, struct ServicePaymentSelectionResType* result);

 

	
/**  
 * \brief   Prepares the remote paymentDetails call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
 * \param	params   struct PaymentDetailsReqType* Request data for the server (has to be set up before)
 * \param	result   struct PaymentDetailsResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_paymentDetails(struct EXIService* service, struct MessageHeaderType* header, struct PaymentDetailsReqType* params, struct PaymentDetailsResType* result);

 

	
/**  
 * \brief   Prepares the remote contractAuthentication call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
 * \param	params   struct ContractAuthenticationReqType* Request data for the server (has to be set up before)
 * \param	result   struct ContractAuthenticationResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_contractAuthentication(struct EXIService* service, struct MessageHeaderType* header, struct ContractAuthenticationReqType* params, struct ContractAuthenticationResType* result);

 

	
/**  
 * \brief   Prepares the remote chargeParameterDiscovery call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
 * \param	params   struct ChargeParameterDiscoveryReqType* Request data for the server (has to be set up before)
 * \param	result   struct ChargeParameterDiscoveryResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_chargeParameterDiscovery(struct EXIService* service, struct MessageHeaderType* header, struct ChargeParameterDiscoveryReqType* params, struct ChargeParameterDiscoveryResType* result);

 

	
/**  
 * \brief   Prepares the remote powerDelivery call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
 * \param	params   struct PowerDeliveryReqType* Request data for the server (has to be set up before)
 * \param	result   struct PowerDeliveryResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_powerDelivery(struct EXIService* service, struct MessageHeaderType* header, struct PowerDeliveryReqType* params, struct PowerDeliveryResType* result);

 

	
/**  
 * \brief   Prepares the remote chargingStatus call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
  * \param	result   struct ChargingStatusResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_chargingStatus(struct EXIService* service, struct MessageHeaderType* header, struct ChargingStatusResType* result);

 

	
/**  
 * \brief   Prepares the remote meteringReceipt call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
 * \param	params   struct MeteringReceiptReqType* Request data for the server (has to be set up before)
 * \param	result   struct MeteringReceiptResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_meteringReceipt(struct EXIService* service, struct MessageHeaderType* header, struct MeteringReceiptReqType* params, struct MeteringReceiptResType* result);

 

	
/**  
 * \brief   Prepares the remote certificateUpdate call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
 * \param	params   struct CertificateUpdateReqType* Request data for the server (has to be set up before)
 * \param	result   struct CertificateUpdateResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_certificateUpdate(struct EXIService* service, struct MessageHeaderType* header, struct CertificateUpdateReqType* params, struct CertificateUpdateResType* result);

 

	
/**  
 * \brief   Prepares the remote certificateInstallation call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
 * \param	params   struct CertificateInstallationReqType* Request data for the server (has to be set up before)
 * \param	result   struct CertificateInstallationResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_certificateInstallation(struct EXIService* service, struct MessageHeaderType* header, struct CertificateInstallationReqType* params, struct CertificateInstallationResType* result);

 

	
/**  
 * \brief   Prepares the remote cableCheck call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
 * \param	params   struct CableCheckReqType* Request data for the server (has to be set up before)
 * \param	result   struct CableCheckResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_cableCheck(struct EXIService* service, struct MessageHeaderType* header, struct CableCheckReqType* params, struct CableCheckResType* result);

 

	
/**  
 * \brief   Prepares the remote preCharge call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
 * \param	params   struct PreChargeReqType* Request data for the server (has to be set up before)
 * \param	result   struct PreChargeResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_preCharge(struct EXIService* service, struct MessageHeaderType* header, struct PreChargeReqType* params, struct PreChargeResType* result);

 

	
/**  
 * \brief   Prepares the remote currentDemand call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
 * \param	params   struct CurrentDemandReqType* Request data for the server (has to be set up before)
 * \param	result   struct CurrentDemandResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_currentDemand(struct EXIService* service, struct MessageHeaderType* header, struct CurrentDemandReqType* params, struct CurrentDemandResType* result);

 

	
/**  
 * \brief   Prepares the remote weldingDetection call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
 * \param	params   struct WeldingDetectionReqType* Request data for the server (has to be set up before)
 * \param	result   struct WeldingDetectionResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_weldingDetection(struct EXIService* service, struct MessageHeaderType* header, struct WeldingDetectionReqType* params, struct WeldingDetectionResType* result);

 

	
/**  
 * \brief   Prepares the remote sessionStop call
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	header   struct MessageHeaderType* Header data structure
  * \param	result   struct SessionStopResType* Contains the response data from the server 
 * \return  0 = 0K; -1 = ERROR */
	int prepare_sessionStop(struct EXIService* service, struct MessageHeaderType* header, struct SessionStopResType* result);

 

	


 /** 
 * \brief   Determines which response message was received
 * \param	service  struct EXIService* Service data structure (has to be initialized before)
 * \param	respMsg   enum responseMessages* contains the name of the response message 
  * \param	result   struct SessionStopResType* Contains the response data from the server 
 * \return  0 = 0K; 0 != ERROR */ 
int determineResponseMesssage(struct EXIService* service, enum responseMessages* respMsg);



/** 
 * \brief  Initialize the v2g client
 * \param	service   struct EXIService* Service data structure
 * \param	service_bytes exi_bytes_t  Reserved for byte handling
 * \param	service_string exi_string_ucs_t  Reserved for string handling
 * \param	inStream  uint8_t* Instream buffer
 * \param	max_inStream_size size_t  Max size for an instream message
 * \param	outStream  uint8_t* Outstream buffer
 * \param   outPayloadLength uint32_t* Provides the length of the encoded request EXI message
 * \param	max_outStream_size size_t  Max size for an outstream message
 * \param	transportHeaderOffset uint16_t Transport protocol offset
 * \return  0 = 0K; -1 = ERROR
 */
int init_v2gServiceClient(struct EXIService* service, exi_bytes_t service_bytes, exi_string_ucs_t service_string, uint8_t* inStream, size_t max_inStream_size, uint8_t* outStream, size_t max_outStream_size,uint32_t* outPayloadLength, uint16_t transportHeaderOffset);
 
 

 
 
#endif

#ifdef __cplusplus
}
#endif
